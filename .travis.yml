# Git options
git:
  submodules: false

branches:
  only:
    - master
    - develop

# Enable c++ support
language: cpp

# To use SYS_PTRACE and sanitizers
sudo: required 

services:
  - docker

# Compiler selection
matrix:
  include:
      - name: "Ubuntu OpenMPI g++"
        env: CC_COMPILER=gcc CXX_COMPILER=g++ TESTING_ENV=ubuntu_openmpi MPIEXEC_PREFLAGS="--allow-run-as-root --oversubscribe" USE_SANITIZER="" CMAKE_BUILD_TYPE=Release

      - name: "Ubuntu OpenMPI clang++"
        env: CC_COMPILER=clang CXX_COMPILER=clang++ TESTING_ENV=ubuntu_openmpi MPIEXEC_PREFLAGS="--allow-run-as-root --oversubscribe" USE_SANITIZER="" CMAKE_BUILD_TYPE=Release

      - name: "Ubuntu MPICH g++"
        env: CC_COMPILER=gcc CXX_COMPILER=g++ TESTING_ENV=ubuntu_mpich USE_SANITIZER=Address LSAN_OPTIONS=suppressions=/root/htool/sanitizers/lsan.blacklist:verbosity=1:log_threads=1 CMAKE_BUILD_TYPE=Debug

      - name: "Ubuntu MPICH clang++"
        env: CC_COMPILER=clang CXX_COMPILER=clang++ TESTING_ENV=ubuntu_mpich USE_SANITIZER=Address LSAN_OPTIONS=suppressions=/root/htool/sanitizers/lsan.blacklist:verbosity=1:log_threads=1 CMAKE_BUILD_TYPE=Debug

      - name: "Debian OpenMPI g++"
        env: CC_COMPILER=gcc CXX_COMPILER=g++ TESTING_ENV=debian_openmpi MPIEXEC_PREFLAGS="--allow-run-as-root --oversubscribe" USE_SANITIZER="" CMAKE_BUILD_TYPE=Release

      - name: "Debian OpenMPI clang++"
        env: CC_COMPILER=clang CXX_COMPILER=clang++ TESTING_ENV=debian_openmpi MPIEXEC_PREFLAGS="--allow-run-as-root --oversubscribe" USE_SANITIZER="" CMAKE_BUILD_TYPE=Release

      - name: "Debian MPICH g++"
        env: CC_COMPILER=gcc CXX_COMPILER=g++ TESTING_ENV=debian_mpich USE_SANITIZER=Address LSAN_OPTIONS=suppressions=/root/htool/sanitizers/lsan.blacklist:verbosity=1:log_threads=1 CMAKE_BUILD_TYPE=Debug

      - name: "Debian MPICH clang++"
        env: CC_COMPILER=clang CXX_COMPILER=clang++ TESTING_ENV=debian_mpich USE_SANITIZER=Address LSAN_OPTIONS=suppressions=/root/htool/sanitizers/lsan.blacklist:verbosity=1:log_threads=1 CMAKE_BUILD_TYPE=Debug

install:
  - docker pull pierremarchand/htool_testing_environments:${TESTING_ENV}
  - docker run --cap-add SYS_PTRACE -itd --name ${TESTING_ENV} pierremarchand/htool_testing_environments:${TESTING_ENV}
  - docker exec -it ${TESTING_ENV} bash -c "cd && git clone https://github.com/hpddm/hpddm.git && cd hpddm && git checkout ce6ce80b62e9bc71efedf8b9cb6ffb00dfd6e44e && cd .."
  - docker exec -it ${TESTING_ENV} bash -c "git clone --single-branch --branch ${TRAVIS_PULL_REQUEST_BRANCH:-$TRAVIS_BRANCH} https://github.com/htool-ddm/htool.git"
  - docker exec -it ${TESTING_ENV} bash -c 'mkdir htool/build'

# Build steps
script:
  - docker exec -it -w /root/htool/build -e MPIEXEC_PREFLAGS="${MPIEXEC_PREFLAGS}" -e USE_SANITIZER="${USE_SANITIZER}" -e CMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE}" ${TESTING_ENV}  bash -c 'CC=${CC_COMPILER} CXX=${CXX_COMPILER} cmake -DHTOOL_WITH_EXAMPLES=1 -DMPIEXEC_PREFLAGS="${MPIEXEC_PREFLAGS}" -DUSE_SANITIZER="${USE_SANITIZER}" -DCMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE}" ../'
  - docker exec -it -w /root/htool/build ${TESTING_ENV} bash -c 'make -j2 build-tests'
  - docker exec -it ${TESTING_ENV} bash -c 'export OMP_NUM_THREADS=2'
  - docker exec -it -w /root/htool/build -e LSAN_OPTIONS="${LSAN_OPTIONS}" ${TESTING_ENV} bash -c 'ctest --output-on-failure'
  - docker exec -it -w /root/htool/build ${TESTING_ENV} bash -c 'make -j2 build-examples'
  - docker exec -it -w /root/htool/build ${TESTING_ENV} bash -c 'make -j2 build-performance-tests'
  - docker exec -it -w /root/htool/build ${TESTING_ENV} bash -c 'make format'
  - docker exec -it -w /root/htool/build ${TESTING_ENV} bash -c 'make cmake-format'
  - docker exec -it -w /root/htool ${TESTING_ENV} bash -c 'git diff --exit-code'

